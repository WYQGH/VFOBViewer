<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WYQDoNet</name>
    </assembly>
    <members>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.CountTimeTask.CheckCycle">
            <summary>
            校验周期
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.CountTimeTask.Cycle">
            <summary>
            周期
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.LoopTimeTask.CheckCycle">
            <summary>
            校验周期
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.LoopTimeTask.Cycle">
            <summary>
            周期
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.OnceTimeTask.CheckCycle">
            <summary>
            校验周期
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.OnceTimeTask.Cycle">
            <summary>
            周期
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.Task.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.Task.Status">
            <summary>
            1表示任务存活,0表示任务暂停，-1表示任务死亡
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.Task.CountDown">
            <summary>
            距离下一任务倒计时
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.Task.Delay">
            <summary>
            首次延迟时间，秒单位
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.Task.Time">
            <summary>
            执行任务时间
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.Task.Interval">
            <summary>
            任务时间间隔
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.Task.Count">
            <summary>
            执行任务次数
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.Task.Result">
            <summary>
            用于保存结果
            </summary>
        </member>
        <member name="F:WYQDoNet.Components.TaskSchedule.Tasks.Task.Data">
            <summary>
            用于保存数据
            </summary>
        </member>
        <member name="T:WYQDoNet.DBS.MSSQL.SqlHelper">
            <summary> 
            SqlServer数据访问帮助类 
            </summary> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ConnStringBuilder(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            创建连接字符串
            </summary>
            <param name="DataSource">数据源地址IP</param>
            <param name="InitialCatalog">数据库名称</param>
            <param name="UserID">登录名</param>
            <param name="Password">密码</param>
            <param name="IntegratedSecurity">是否windows身份验证</param>
            <returns>连接字符串</returns>
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.GetConnSting(System.String)">
            <summary> 
            一个有效的数据库连接字符串 
            </summary> 
            <param name="connStrKey">数据库连接字符串键名</param>
            <returns></returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.GetConnection(System.String)">
            <summary> 
            一个有效的数据库连接对象 
            </summary> 
            <param name="connStrKey">数据库连接字符串键名</param>
            <returns></returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            将SqlParameter参数数组(参数值)分配给SqlCommand命令. 
            这个方法将给任何一个参数分配DBNull.Value; 
            该操作将阻止默认值的使用. 
            </summary> 
            <param name="command">命令名</param> 
            <param name="commandParameters">SqlParameters数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary> 
            将DataRow类型的列值分配到SqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的SqlParameter参数数组</param> 
            <param name="dataRow">将要分配给存储过程参数的DataRow</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary> 
            将一个对象数组分配给SqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的SqlParameter参数数组</param> 
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary> 
            预处理用户提供的命令,数据库连接/事务/命令类型/参数 
            </summary> 
            <param name="command">要处理的SqlCommand</param> 
            <param name="connection">数据库连接</param> 
            <param name="transaction">一个有效的事务或者是null值</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名或都T-SQL命令文本</param> 
            <param name="commandParameters">和命令相关联的SqlParameter参数数组,如果没有参数为'null'</param> 
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@,System.Int32)">
            <summary> 
            预处理用户提供的命令,数据库连接/事务/命令类型/参数 
            </summary> 
            <param name="command">要处理的SqlCommand</param> 
            <param name="connection">数据库连接</param> 
            <param name="transaction">一个有效的事务或者是null值</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名或都T-SQL命令文本</param> 
            <param name="commandParameters">和命令相关联的SqlParameter参数数组,如果没有参数为'null'</param> 
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param> 
            <param name="commandTimeout">等待命令执行所需的时间（以秒为单位）。 默认值为 30 秒。</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定连接字符串,类型的SqlCommand. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或SQL语句</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定连接字符串,类型的SqlCommand.如果没有提供参数,不返回结果. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或SQL语句</param> 
            <param name="commandParameters">SqlParameter参数数组</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <!-- Badly formed XML comment ignored for member "M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])" -->
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">T存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <!-- Badly formed XML comment ignored for member "M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)" -->
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行带事务的SqlCommand(指定参数). 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行带事务的SqlCommand(指定参数值). 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回受影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例: 
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">SqlParamters参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值. 
            示例: 
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定事务的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定事务的命令,指定参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定事务的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="T:WYQDoNet.DBS.MSSQL.SqlHelper.SqlConnectionOwnership">
            <summary> 
            枚举,标识数据库连接是由SqlHelper提供还是由调用者提供 
            </summary> 
        </member>
        <member name="F:WYQDoNet.DBS.MSSQL.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>由SqlHelper提供连接</summary> 
        </member>
        <member name="F:WYQDoNet.DBS.MSSQL.SqlHelper.SqlConnectionOwnership.External">
            <summary>由调用者提供连接</summary> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],WYQDoNet.DBS.MSSQL.SqlHelper.SqlConnectionOwnership)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            如果是SqlHelper打开连接,当连接关闭DataReader也将关闭. 
            如果是调用都打开连接,DataReader由调用都管理. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的事务,或者为 'null'</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParameters参数数组,如果没有参数则为'null'</param> 
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由SqlHelper提供</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <param name="commandParameters">SqlParamter参数数组(new SqlParameter("@prodid", 24))</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandParameters">SqlParamter参数数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">T存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            示例:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称 using "FOR XML AUTO"</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.)</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary> 
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/SqlParameters. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-SQL语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary> 
            执行数据集更新到数据库,指定inserted, updated, or deleted命令. 
            </summary> 
            <remarks> 
            示例:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order"); 
            </remarks> 
            <param name="insertCommand">[追加记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="deleteCommand">[删除记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="updateCommand">[更新记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="dataSet">要更新到数据库的DataSet</param> 
            <param name="tableName">要更新到数据库的DataTable</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.Int32)">
            <summary> 
            执行数据集更新到数据库,指定inserted, updated, or deleted命令. 
            </summary> 
            <remarks> 
            示例:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order"); 
            </remarks> 
            <param name="insertCommand">[追加记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="deleteCommand">[删除记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="updateCommand">[更新记录]一个有效的T-SQL语句或存储过程</param> 
            <param name="dataSet">要更新到数据库的DataSet</param> 
            <param name="tableName">要更新到数据库的DataTable</param> 
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary> 
            创建SqlCommand命令,指定数据库连接对象,存储过程名和参数. 
            </summary> 
            <remarks> 
            示例:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="sourceColumns">源表的列名称数组</param> 
            <returns>返回SqlCommand命令</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
            
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的SqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="T:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache">
            <summary> 
            SqlHelperParameterCache提供缓存存储过程参数,并能够在运行时从存储过程中探索参数. 
            </summary> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            探索运行时的存储过程,返回SqlParameter参数数组. 
            初始化参数值为 DBNull.Value. 
            </summary> 
            <param name="connection">一个有效的数据库连接</param> 
            <param name="spName">存储过程名称</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary> 
            SqlParameter参数数组的深层拷贝. 
            </summary> 
            <param name="originalParameters">原始参数数组</param> 
            <returns>返回一个同样的参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary> 
            追加参数数组到缓存. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandText">存储过程名或SQL语句</param> 
            <param name="commandParameters">要缓存的参数数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary> 
            从缓存中获取参数数组. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="commandText">存储过程名或SQL语句</param> 
            <returns>参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符.</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象). 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter"> 
            是否包含返回值参数 
            </param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MSSQL.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary> 
            [私有]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回SqlParameter参数数组</returns> 
        </member>
        <member name="T:WYQDoNet.DBS.MySQL.MySqlHelper">
            <summary> 
            MySqlServer数据访问帮助类 
            </summary> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.GetConnSting(System.String)">
            <summary> 
            一个有效的数据库连接字符串 
            </summary> 
            <param name="connStrKey">数据库连接字符串键名</param>
            <returns></returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.GetConnection(System.String)">
            <summary> 
            一个有效的数据库连接对象 
            </summary> 
            <param name="connStrKey">数据库连接字符串键名</param>
            <returns></returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.AttachParameters(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            将MySqlParameter参数数组(参数值)分配给MySqlCommand命令. 
            这个方法将给任何一个参数分配DBNull.Value; 
            该操作将阻止默认值的使用. 
            </summary> 
            <param name="command">命令名</param> 
            <param name="commandParameters">MySqlParameters数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Data.DataRow)">
            <summary> 
            将DataRow类型的列值分配到MySqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的MySqlParameter参数数组</param> 
            <param name="dataRow">将要分配给存储过程参数的DataRow</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.AssignParameterValues(MySql.Data.MySqlClient.MySqlParameter[],System.Object[])">
            <summary> 
            将一个对象数组分配给MySqlParameter参数数组. 
            </summary> 
            <param name="commandParameters">要分配值的MySqlParameter参数数组</param> 
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.PrepareCommand(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[],System.Boolean@)">
            <summary> 
            预处理用户提供的命令,数据库连接/事务/命令类型/参数 
            </summary> 
            <param name="command">要处理的MySqlCommand</param> 
            <param name="connection">数据库连接</param> 
            <param name="transaction">一个有效的事务或者是null值</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名或都T-MySql命令文本</param> 
            <param name="commandParameters">和命令相关联的MySqlParameter参数数组,如果没有参数为'null'</param> 
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.PrepareCommand(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[],System.Boolean@,System.Int32)">
            <summary> 
            预处理用户提供的命令,数据库连接/事务/命令类型/参数 
            </summary> 
            <param name="command">要处理的MySqlCommand</param> 
            <param name="connection">数据库连接</param> 
            <param name="transaction">一个有效的事务或者是null值</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名或都T-MySql命令文本</param> 
            <param name="commandParameters">和命令相关联的MySqlParameter参数数组,如果没有参数为'null'</param> 
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param> 
            <param name="commandTimeout">等待命令执行所需的时间（以秒为单位）。 默认值为 30 秒。</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定连接字符串,类型的MySqlCommand. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或MySql语句</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定连接字符串,类型的MySqlCommand.如果没有提供参数,不返回结果. 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param> 
            <param name="commandText">存储过程名称或MySql语句</param> 
            <param name="commandParameters">MySqlParameter参数数组</param> 
            <returns>返回命令影响的行数</returns> 
        </member>
        <!-- Badly formed XML comment ignored for member "M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])" -->
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">T存储过程名称或T-MySql语句</param> 
            <param name="commandParameters">MySqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <!-- Badly formed XML comment ignored for member "M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)" -->
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行带事务的MySqlCommand(指定参数). 
            </summary> 
            <remarks> 
            示例:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="commandParameters">MySqlParamter参数数组</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Object[])">
            <summary> 
            执行带事务的MySqlCommand(指定参数值). 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值 
            示例:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回受影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例: 
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="commandParameters">MySqlParamters参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值. 
            示例: 
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-MySql语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-MySql语句</param> 
            <param name="commandParameters">MySqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定事务的命令,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-MySql语句</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定事务的命令,指定参数,返回DataSet. 
            </summary> 
            <remarks> 
            示例:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-MySql语句</param> 
            <param name="commandParameters">MySqlParamter参数数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定事务的命令,指定参数值,返回DataSet. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输入参数和返回值. 
            示例.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">事务</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet</returns> 
        </member>
        <member name="T:WYQDoNet.DBS.MySQL.MySqlHelper.MySqlConnectionOwnership">
            <summary> 
            枚举,标识数据库连接是由MySqlHelper提供还是由调用者提供 
            </summary> 
        </member>
        <member name="F:WYQDoNet.DBS.MySQL.MySqlHelper.MySqlConnectionOwnership.Internal">
            <summary>由MySqlHelper提供连接</summary> 
        </member>
        <member name="F:WYQDoNet.DBS.MySQL.MySqlHelper.MySqlConnectionOwnership.External">
            <summary>由调用者提供连接</summary> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[],WYQDoNet.DBS.MySQL.MySqlHelper.MySqlConnectionOwnership)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            如果是MySqlHelper打开连接,当连接关闭DataReader也将关闭. 
            如果是调用都打开连接,DataReader由调用都管理. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的事务,或者为 'null'</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-MySql语句</param> 
            <param name="commandParameters">MySqlParameters参数数组,如果没有参数则为'null'</param> 
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由MySqlHelper提供</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             MySqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-MySql语句</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             MySqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-MySql语句</param> 
            <param name="commandParameters">MySqlParamter参数数组(new MySqlParameter("@prodid", 24))</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             MySqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的数据阅读器. 
            </summary> 
            <remarks> 
            示例:  
             MySqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名或T-MySql语句</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             MySqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandParameters">MySqlParamter参数数组</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            示例:  
             MySqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">T存储过程名</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            示例:  
             MySqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数. 
            </summary> 
            <remarks> 
            示例:  
              MySqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Object[])">
            <summary> 
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             MySqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的命令,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            示例:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteXmlReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库连接对象的MySqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteXmlReader(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库连接对象的MySqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.CmdExecuteXmlReader(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            将 CommandText发送到 Connection 并生成一个 XmlReader 对象。
            </summary>
            <param name="cmd"></param>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteXmlReader(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Object[])">
            <summary> 
            执行指定数据库连接对象的MySqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称 using "FOR XML AUTO"</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteXmlReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String)">
            <summary> 
            执行指定数据库事务的MySqlCommand命令,并产生一个XmlReader对象做为结果集返回. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders"); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句 using "FOR XML AUTO"</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteXmlReader(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库事务的MySqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句 using "FOR XML AUTO"</param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteXmlReader(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Object[])">
            <summary> 
            执行指定数据库事务的MySqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.)</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24); 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param>    
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary> 
            执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值. 
            </summary> 
            <remarks> 
            此方法不提供访问存储过程输出参数和返回值参数. 
            
            示例:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36); 
            </remarks> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.FillDataset(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/MySqlParameters. 
            </summary> 
            <remarks> 
            示例:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new MySqlParameter("@prodid", 24)); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="transaction">一个有效的连接事务</param> 
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param> 
            <param name="commandText">存储过程名称或T-MySql语句</param> 
            <param name="dataSet">要填充结果集的DataSet实例</param> 
            <param name="tableNames">表映射的数据表数组 
            用户定义的表名 (可有是实际的表名.) 
            </param> 
            <param name="commandParameters">分配给命令的MySqlParamter参数数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.UpdateDataset(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlCommand,System.Data.DataSet,System.String)">
            <summary> 
            执行数据集更新到数据库,指定inserted, updated, or deleted命令. 
            </summary> 
            <remarks> 
            示例:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order"); 
            </remarks> 
            <param name="insertCommand">[追加记录]一个有效的T-MySql语句或存储过程</param> 
            <param name="deleteCommand">[删除记录]一个有效的T-MySql语句或存储过程</param> 
            <param name="updateCommand">[更新记录]一个有效的T-MySql语句或存储过程</param> 
            <param name="dataSet">要更新到数据库的DataSet</param> 
            <param name="tableName">要更新到数据库的DataTable</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.UpdateDataset(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlCommand,System.Data.DataSet,System.Int32)">
            <summary> 
            执行数据集更新到数据库,指定inserted, updated, or deleted命令. 
            </summary> 
            <remarks> 
            示例:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order"); 
            </remarks> 
            <param name="insertCommand">[追加记录]一个有效的T-MySql语句或存储过程</param> 
            <param name="deleteCommand">[删除记录]一个有效的T-MySql语句或存储过程</param> 
            <param name="updateCommand">[更新记录]一个有效的T-MySql语句或存储过程</param> 
            <param name="dataSet">要更新到数据库的DataSet</param> 
            <param name="tableName">要更新到数据库的DataTable</param> 
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.CreateCommand(MySql.Data.MySqlClient.MySqlConnection,System.String,System.String[])">
            <summary> 
            创建MySqlCommand命令,指定数据库连接对象,存储过程名和参数. 
            </summary> 
            <remarks> 
            示例:  
             MySqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName"); 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="sourceColumns">源表的列名称数组</param> 
            <returns>返回MySqlCommand命令</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQueryTypedParams(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteNonQueryTypedParams(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回影响的行数</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDatasetTypedParams(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
            
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteDatasetTypedParams(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回一个包含结果集的DataSet.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReaderTypedParams(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteReaderTypedParams(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回包含结果集的MySqlDataReader</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalarTypedParams(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteScalarTypedParams(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回结果集中的第一行第一列</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteXmlReaderTypedParams(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelper.ExecuteXmlReaderTypedParams(MySql.Data.MySqlClient.MySqlTransaction,System.String,System.Data.DataRow)">
            <summary> 
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集. 
            </summary> 
            <param name="transaction">一个有效的连接事务 object</param> 
            <param name="spName">存储过程名称</param> 
            <param name="dataRow">使用DataRow作为参数值</param> 
            <returns>返回XmlReader结果集对象.</returns> 
        </member>
        <member name="T:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache">
            <summary> 
            MySqlHelperParameterCache提供缓存存储过程参数,并能够在运行时从存储过程中探索参数. 
            </summary> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache.DiscoverSpParameterSet(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Boolean)">
            <summary> 
            探索运行时的存储过程,返回MySqlParameter参数数组. 
            初始化参数值为 DBNull.Value. 
            </summary> 
            <param name="connection">一个有效的数据库连接</param> 
            <param name="spName">存储过程名称</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回MySqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache.CloneParameters(MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            MySqlParameter参数数组的深层拷贝. 
            </summary> 
            <param name="originalParameters">原始参数数组</param> 
            <returns>返回一个同样的参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache.CacheParameterSet(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary> 
            追加参数数组到缓存. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符串</param> 
            <param name="commandText">存储过程名或MySql语句</param> 
            <param name="commandParameters">要缓存的参数数组</param> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary> 
            从缓存中获取参数数组. 
            </summary> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="commandText">存储过程名或MySql语句</param> 
            <returns>参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回MySqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary> 
            返回指定的存储过程的参数集 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connectionString">一个有效的数据库连接字符.</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回MySqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache.GetSpParameterSet(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象). 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接字符</param> 
            <param name="spName">存储过程名</param> 
            <returns>返回MySqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache.GetSpParameterSet(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Boolean)">
            <summary> 
            [内部]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <remarks> 
            这个方法将查询数据库,并将信息存储到缓存. 
            </remarks> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter"> 
            是否包含返回值参数 
            </param> 
            <returns>返回MySqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.MySQL.MySqlHelperParameterCache.GetSpParameterSetInternal(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Boolean)">
            <summary> 
            [私有]返回指定的存储过程的参数集(使用连接对象) 
            </summary> 
            <param name="connection">一个有效的数据库连接对象</param> 
            <param name="spName">存储过程名</param> 
            <param name="includeReturnValueParameter">是否包含返回值参数</param> 
            <returns>返回MySqlParameter参数数组</returns> 
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.GetConnectionString(System.String,System.String,System.Int32)">
            <summary>  
            根据数据源、密码、版本号设置连接字符串。  
            </summary>  
            <param name="datasource">数据源。</param>  
            <param name="password">密码。</param>  
            <param name="version">版本号（缺省为3）。</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.CreateNewDatabase(System.String)">
            <summary>
            创建一个空的数据库
            </summary>
            <param name="dbPath">数据库文件全路径</param>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.GetConnectionFromNewDatabase(System.String)">
            <summary>
            创建一个空的数据库
            </summary>
            <param name="dbPath">数据库文件全路径</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.GetConnection(System.String)">
            <summary>
            获取数据库连接
            </summary>
            <param name="dbPath">数据库文件全路径</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteNonQuery(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>   
            对SQLite数据库执行增删改操作，返回受影响的行数。   
            </summary>   
            <param name="connection"></param>
            <param name="sql">要执行的增删改的SQL语句。</param>   
            <param name="parameters">执行增删改语句所需要的参数，参数必须以它们在SQL语句中的顺序为准。</param>   
            <returns></returns>   
            <exception cref="T:System.Exception"></exception>  
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteNonQueryBatch(System.Data.SQLite.SQLiteConnection,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Data.SQLite.SQLiteParameter[]}})">
            <summary>  
            批量处理数据操作语句。  
            </summary>  
            <param name="connection"></param>
            <param name="list">SQL语句集合。</param>  
            <exception cref="T:System.Exception"></exception>  
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteScalar(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>  
            执行查询语句，并返回第一个结果。  
            </summary>  
            <param name="connection"></param>
            <param name="sql">查询语句。</param>  
            <returns>查询结果。</returns>  
            <exception cref="T:System.Exception"></exception>  
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteQuery(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>   
            执行一个查询语句，返回一个包含查询结果的DataTable。   
            </summary>   
            <param name="connection"></param>
            <param name="sql">要执行的查询语句。</param>   
            <param name="parameters">执行SQL查询语句所需要的参数，参数必须以它们在SQL语句中的顺序为准。</param>   
            <returns></returns>   
            <exception cref="T:System.Exception"></exception>  
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteReader(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>   
            执行一个查询语句，返回一个关联的SQLiteDataReader实例。   
            </summary>   
            <param name="connection"></param>
            <param name="sql">要执行的查询语句。</param>   
            <param name="parameters">执行SQL查询语句所需要的参数，参数必须以它们在SQL语句中的顺序为准。</param>   
            <returns></returns>   
            <exception cref="T:System.Exception"></exception>  
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.CreateCommand(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="connection">Connection.</param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Command parameters.</param>
            <returns>SQLite Command</returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.CreateCommand(System.String,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Command parameters.</param>
            <returns>SQLite Command</returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterType">Parameter type.</param>
            <param name="parameterValue">Parameter value.</param>
            <returns>SQLiteParameter</returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteDataSet(System.String,System.String,System.Object[])">
            <summary>
            Shortcut method to execute dataset from SQL Statement and object[] arrray of parameter values
            </summary>
            <param name="connectionString">SQLite Connection string</param>
            <param name="commandText">SQL Statement with embedded "@param" style parameter names</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteConnection,System.String,System.Object[])">
            <summary>
            Shortcut method to execute dataset from SQL Statement and object[] arrray of  parameter values
            </summary>
            <param name="cn">Connection.</param>
            <param name="commandText">Command text.</param>
            <param name="paramList">Param list.</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteDataset(System.Data.SQLite.SQLiteCommand)">
            <summary>
            Executes the dataset from a populated Command object.
            </summary>
            <param name="cmd">Fully populated SQLiteCommand</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteDataset(System.Data.SQLite.SQLiteTransaction,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Executes the dataset in a SQLite Transaction
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,  /// and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Sqlite Command parameters.</param>
            <returns>DataSet</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteDataset(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>
            Executes the dataset with Transaction and object array of parameter values.
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,    /// and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">object[] array of parameter values.</param>
            <returns>DataSet</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.UpdateDataset(System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid SQL statement  to insert new records into the data source</param>
            <param name="deleteCommand">A valid SQL statement to delete records from the data source</param>
            <param name="updateCommand">A valid SQL statement used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteReader(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>
            ShortCut method to return IDataReader
            NOTE: You should explicitly close the Command.connection you passed in as
            well as call Dispose on the Command  after reader is closed.
            We do this because IDataReader has no underlying Connection Property.
            </summary>
            <param name="cmd">SQLiteCommand Object</param>
            <param name="commandText">SQL Statement with optional embedded "@param" style parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Shortcut to ExecuteNonQuery with SqlStatement and object[] param values
            </summary>
            <param name="connectionString">SQLite Connection String</param>
            <param name="commandText">Sql Statement with embedded "@param" style parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteNonQuery(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>
            Executes  non-query sql Statment with Transaction
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,   /// and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="paramList">Param list.</param>
            <returns>Integer</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="cmd">CMD.</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Shortcut to ExecuteScalar with Sql Statement embedded params and object[] param values
            </summary>
            <param name="connectionString">SQLite Connection String</param>
            <param name="commandText">SQL statment with embedded "@param" style parameters</param>
            <param name="paramList">object[] array of param values</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>
            Execute XmlReader with complete Command
            </summary>
            <param name="command">SQLite Command</param>
            <returns>XmlReader</returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.AttachParameters(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>
            Parses parameter names from SQL Statement, assigns values from object array ,   /// and returns fully populated ParameterCollection.
            </summary>
            <param name="commandText">Sql Statement with "@param" style embedded parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns>SQLiteParameterCollection</returns>
            <remarks>Status experimental. Regex appears to be handling most issues. Note that parameter object array must be in same ///order as parameter names appear in SQL statement.</remarks>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.ExecuteNonQueryTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Executes non query typed params from a DataRow
            </summary>
            <param name="command">Command.</param>
            <param name="dataRow">Data row.</param>
            <returns>Integer result code</returns>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.AssignParameterValues(System.Data.IDataParameterCollection,System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an IDataParameterCollection
            </summary>
            <param name="commandParameters">The IDataParameterCollection to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the command's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:WYQDoNet.DBS.SQLite.SQLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
            <exception cref="T:System.ArgumentException">Thrown if an incorrect number of parameters are passed.</exception>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.AppUtils.AppHelper.GetCurrentApplicationBaseDirectory">
            <summary>
            结尾有 \
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.CollectionUtils.CollectionHelper.NameValueCollectionLink(System.Collections.Specialized.NameValueCollection,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            将NameValueCollection连接成字符串
            </summary>
            <param name="nvc">要连接的NameValueCollection</param>
            <param name="nvs">NameValue之间分隔符</param>
            <param name="nv">Name与Value之间的分隔符</param>
            <param name="vs">Value之间的分隔符</param>
            <param name="isheader">nvc是否加在前面</param>
            <param name="isfooter">nvc是否加在后面</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetUtcNowDateTime">
            <summary>
            返回Utc时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetBeijingNowDateTime">
            <summary>
            返回北京时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetUtcNow(System.String,System.Globalization.CultureInfo)">
            <summary>
            依据指定格式，文化信息，获取Utc时间
            </summary>
            <param name="format">时间格式</param>
            <param name="ci">文化信息</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetBeijingNow(System.String,System.Globalization.CultureInfo)">
            <summary>
            依据指定格式，文化信息，获取北京时间
            </summary>
            <param name="format">时间格式</param>
            <param name="ci">文化信息</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetUtcNow">
            <summary>
            默认格式，文化信息，获取Utc时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetBeijingNow">
            <summary>
            默认格式，文化信息，获取北京时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetBeijingNow(System.Int32,System.Char,System.Boolean)">
            <summary>
            返回北京时间
            </summary>
            <param name="width">最小值为19</param>
            <param name="fill"></param>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetBeijingNow(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            获取指定宽度的北京时间
            </summary>
            <param name="format">格式</param>
            <param name="width">宽度,最小值19</param>
            <param name="fill">填充</param>
            <param name="left">左填充</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetUtcNow(System.Int32,System.Char,System.Boolean)">
            <summary>
            获取指定宽度的Utc时间
            </summary>
            <param name="width">宽度最小值19</param>
            <param name="fill">填充</param>
            <param name="left">左填充</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.DateUtils.DateHelper.GetUtcNow(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            获取指定宽度的Utc时间
            </summary>
            <param name="format">格式</param>
            <param name="width">宽度，最小值19</param>
            <param name="fill">填充</param>
            <param name="left">左填充</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.EnDecodingUtils.EnDecodingHelper.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            url编码
            </summary>
            <param name="input"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.EnDecodingUtils.EnDecodingHelper.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            url解密
            </summary>
            <param name="input"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.ExceptionUtils.ExceptionHelper.GetExceptionInfo(System.Exception)">
            <summary>
            获取异常信息，不换行
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.ExceptionUtils.ExceptionHelper.GetExceptionInfoln(System.Exception)">
            <summary>
            获取异常信息，换行
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="T:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper">
            <summary>
            Desktop:C:\Users\WYQ\Desktop
            Programs:C:\Users\WYQ\AppData\Roaming\Microsoft\Windows\Start Menu\Programs
            MyDocuments:C:\Users\WYQ\Documents
            MyDocuments:C:\Users\WYQ\Documents
            Favorites:C:\Users\WYQ\Favorites
            Startup:C:\Users\WYQ\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
            Recent:C:\Users\WYQ\AppData\Roaming\Microsoft\Windows\Recent
            SendTo:C:\Users\WYQ\AppData\Roaming\Microsoft\Windows\SendTo
            StartMenu:C:\Users\WYQ\AppData\Roaming\Microsoft\Windows\Start Menu
            MyMusic:C:\Users\WYQ\Music
            MyVideos:C:\Users\WYQ\Videos
            DesktopDirectory:C:\Users\WYQ\Desktop
            MyComputer:
            NetworkShortcuts:C:\Users\WYQ\AppData\Roaming\Microsoft\Windows\Network Shortcuts
            Fonts:C:\Windows\Fonts
            Templates:C:\Users\WYQ\AppData\Roaming\Microsoft\Windows\Templates
            CommonStartMenu:C:\ProgramData\Microsoft\Windows\Start Menu
            CommonPrograms:C:\ProgramData\Microsoft\Windows\Start Menu\Programs
            CommonStartup:C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup
            CommonDesktopDirectory:C:\Users\Public\Desktop
            ApplicationData:C:\Users\WYQ\AppData\Roaming
            PrinterShortcuts:C:\Users\WYQ\AppData\Roaming\Microsoft\Windows\Printer Shortcuts
            LocalApplicationData:C:\Users\WYQ\AppData\Local
            InternetCache:C:\Users\WYQ\AppData\Local\Microsoft\Windows\INetCache
            Cookies:C:\Users\WYQ\AppData\Local\Microsoft\Windows\INetCookies
            History:C:\Users\WYQ\AppData\Local\Microsoft\Windows\History
            CommonApplicationData:C:\ProgramData
            Windows:C:\Windows
            System:C:\Windows\system32
            ProgramFiles:C:\Program Files (x86)
            MyPictures:C:\Users\WYQ\Pictures
            UserProfile:C:\Users\WYQ
            SystemX86:C:\Windows\SysWOW64
            ProgramFilesX86:C:\Program Files (x86)
            CommonProgramFiles:C:\Program Files (x86)\Common Files
            CommonProgramFilesX86:C:\Program Files (x86)\Common Files
            CommonTemplates:C:\ProgramData\Microsoft\Windows\Templates
            CommonDocuments:C:\Users\Public\Documents
            CommonAdminTools:C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Administrative Tools
            AdminTools:C:\Users\WYQ\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Administrative Tools
            CommonMusic:C:\Users\Public\Music
            CommonPictures:C:\Users\Public\Pictures
            CommonVideos:C:\Users\Public\Videos
            Resources:C:\Windows\resources
            LocalizedResources:
            CommonOemLinks:
            CDBurning:C:\Users\WYQ\AppData\Local\Microsoft\Windows\Burn\Burn
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetDesktopDirectoryPath">
            <summary>
            DesktopDirectory:C:\Users\WYQ\Desktop
            获取当前用户桌面路径，尾部没有"\"
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetCommonDesktopDirectoryPath">
            <summary>
            CommonDesktopDirectory:C:\Users\Public\Desktop
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetUserProfilePath">
            <summary>
            UserProfile:C:\Users\WYQ
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetLocalApplicationDataPath">
            <summary>
            LocalApplicationData:C:\Users\WYQ\AppData\Local
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetCommonApplicationDataPath">
            <summary>
            CommonApplicationData:C:\ProgramData
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetWindowsPath">
            <summary>
            Windows:C:\Windows
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetSystemPath">
            <summary>
            System:C:\Windows\system32
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetSystemX86Path">
            <summary>
            SystemX86:C:\Windows\SysWOW64
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetProgramFilesX86Path">
            <summary>
            ProgramFilesX86:C:\Program Files (x86)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetProgramFilesPath">
            <summary>
            ProgramFiles:C:\Program Files
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetFontsPath">
            <summary>
            Fonts:C:\Windows\Fonts
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetMyDocumentsPath">
            <summary>
            MyDocuments:C:\Users\WYQ\Documents
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetMyVideosPath">
            <summary>
            MyVideos:C:\Users\WYQ\Videos
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetMyMusicPath">
            <summary>
            MyMusic:C:\Users\WYQ\Music
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetMyPicturesPath">
            <summary>
            MyPictures:C:\Users\WYQ\Pictures
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetTempPath">
            <summary>
            此方法检查是否存在以下顺序的环境变量，并使用找到的第一个路径：
            由 TMP 环境变量指定的路径。
            由 TEMP 环境变量指定的路径。
            由 USERPROFILE 环境变量指定的路径。
            Windows 目录。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetTempFileName">
            <summary>
            此方法创建带 .TMP 文件扩展名的临时文件。 临时文件在用户的 temp 文件夹中创建，是 GetTempPath 方法返回的路径。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.PathUtils.PathHelper.GetRandomFileName">
            <summary>
            GetRandomFileName 方法返回可用作文件夹名或文件名的加密的强随机字符串。 与 GetTempFileName 不同，GetRandomFileName 不创建文件。 当文件系统的安全性非常重要时，应使用此方法而不是 GetTempFileName。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.RandomUtils.RandomHelper.GetRandomCode(System.Int32,System.Int32)">
            <summary>
            生成一串code
            </summary>
            <param name="length">code长度</param>
            <param name="type">code类型，1表示只有数字组成，2表示只有小写字母组成,3表示只有大写字母组成,12表示有数组、小写字母组成...</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.RandomUtils.RandomHelper.GetRandomInts(System.Int32,System.Int32,System.Int32)">
            <summary>
            生成指定个数的随机整数
            </summary>
            <param name="count">随机数个数</param>
            <param name="min">所有随机数的最小值，包括该最小值</param>
            <param name="max">所有随机数的最大值，不包括该最大值</param>
            <returns>返回随机数数组</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.StringUtils.StringArrayHelper.StringArrayAddString(System.String[],System.String,System.Boolean)">
            <summary>
            对string数组每个元素添加相同的字符串
            </summary>
            <param name="sa"></param>
            <param name="adds"></param>
            <param name="ishead">是否添加在前部</param>
            <returns>返回结果字符串</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.StringUtils.StringArrayHelper.StringArrayLink(System.String[],System.String,System.Boolean,System.Boolean)">
            <summary>
            将字符串数组连接成一个字符串，临界点为指定总分
            </summary>
            <param name="sa"></param>
            <param name="link">连接符</param>
            <param name="isheader">前部是否加连接符</param>
            <param name="isfooter">尾部是否加连接符</param>
            <returns>返回连接后的字符串</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.StringUtils.StringArrayHelper.StringToArrayString(System.String,System.Int32)">
            <summary>
            将字符串转为字符串数组，元素个数相等
            </summary>
            <param name="input"></param>
            <param name="width">数组元素宽度</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.StringUtils.StringArrayHelper.StringToArrayStringAlign(System.String,System.Int32)">
            <summary>
            将字符串转为字符串数组，元素显示宽度相等
            </summary>
            <param name="input"></param>
            <param name="width">数组元素显示宽度</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.StringUtils.StringHelper.StringTrim(System.String,System.String)">
            <summary>
            使用参数控制TrimString
            </summary>
            <param name="input"></param>
            <param name="trimType">l,r,a,n</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.StringUtils.StringHelper.GetRepeatString(System.Int32,System.Char)">
            <summary>
            返回字符重复指定次数字符串
            </summary>
            <param name="times">重复次数</param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.StringUtils.StringHelper.GetRepeatString(System.Int32,System.String)">
            <summary>
            返回字符串重复指定次数字符串
            </summary>
            <param name="times">重复次数</param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.StringUtils.StringHelper.isASCLL(System.Char)">
            <summary>
            判断字符是否是ascll
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.BaseUtils.StringUtils.StringHelper.isASCLL(System.String)">
            <summary>
            判断字符串是否全由ascll字符构成
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.EnDecryptUtils.DigestUtils.DigestHelper.GetHash(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="type">Clear、MD5、SHA1</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.GraphicsUtils.ColorUtils.ColorHelper.GetRandomDeepColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成随机深颜色
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.GraphicsUtils.ColorUtils.ColorHelper.GetRandomLightColor(System.Int32,System.Int32)">
            <summary>
            生成随机浅颜色
            </summary>
            <returns>randomColor</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.GraphicsUtils.ColorUtils.ColorHelper.GetRandomColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            生成随机颜色值
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.GraphicsUtils.ColorUtils.ColorHelper.AddColor(System.Drawing.Color,System.Int32)">
            <summary>
            获取与当前颜色值相加后的颜色
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.GraphicsUtils.DrawUtils.GraphicsHelper.DrawBorders(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Color,System.Single)">
            <summary>
            绘制矩形border
            </summary>
            <param name="g">Graphics对象</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="c">颜色</param>
            <param name="thickness">border厚度</param>
        </member>
        <member name="M:WYQDoNet.DoNet.GraphicsUtils.DrawUtils.GraphicsHelper.DrawRoundRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Single,System.Int32)">
            <summary>
            绘制圆角矩形border
            </summary>
            <param name="g">Graphics对象</param>
            <param name="rectangle">矩形</param>
            <param name="borderColor">border颜色</param>
            <param name="thickness">border厚度</param>
            <param name="r"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.GraphicsUtils.DrawUtils.GraphicsHelper.GetRandomPoints(System.Drawing.Rectangle,System.Int32)">
            <summary>
            获取点集
            </summary>
            <param name="rect">点的区域</param>
            <param name="count">点的数量</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.GraphicsUtils.DrawUtils.GraphicsPathHelper.GetRoundRectanglePath(System.Drawing.Rectangle,System.Int32)">
            <summary>
            获取GraphicsPath
            </summary>
            <param name="rectangle">矩形</param>
            <param name="r">设置圆角矩形的圆角</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.FileUtils.FileHelper.FileRename(System.String,System.String)">
            <summary>
            文件重命名
            </summary>
            <param name="filePath"></param>
            <param name="newFilePath"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.FileUtils.FileHelper.CreateDirectories(System.String,System.String[])">
            <summary>
            批量创建目录
            </summary>
            <param name="path"></param>
            <param name="dns">不以"\"、'/'开头</param>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.FileUtils.FileHelper.GetDirectories(System.String)">
            <summary>
            获取目录下的所有目录
            </summary>
            <param name="dn"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.FileUtils.FileHelper.GetFiles(System.String)">
            <summary>
            获取目录下的所有文件不包括文件夹
            </summary>
            <param name="dn"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.FileUtils.FileHelper.StringsToTxtFile(System.String,System.String[],System.Boolean)">
            <summary>
            将字符串数组追加到文件末尾，一个元素一行
            </summary>
            <param name="path"></param>
            <param name="contents"></param>
            <param name="isoverride"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.FileUtils.FileHelper.AppendLines(System.String,System.String[])">
            <summary>
            将字符串数组追加到文件末尾，一个元素一行
            </summary>
            <param name="path"></param>
            <param name="lines"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.FileUtils.FileHelper.FileCreate(System.String,System.Boolean,System.Boolean)">
            <summary>
            在指定路径中创建或覆盖文件。
            </summary>
            <param name="path"></param>
            <param name="isDir">如果目录不存在，是否创建目录</param>
            <param name="isoverrideFile">如果文件存在是否覆盖</param>
            <returns>返回是否创建成功</returns>
        </member>
        <member name="T:WYQDoNet.DoNet.IOUtils.FileUtils.Properties">
            <summary>
            类似Java的属性类,注释行开头为#、![ 一定要放在一行,开头可以为空格.key-value的分隔符为第一个:、=，开头可以为空格
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.PathUtils.PathHelper.CheckFileExtension(System.String,System.String,System.Boolean)">
            <summary>
            验证扩展名
            </summary>
            <param name="filepath"></param>
            <param name="extension"></param>
            <param name="ac"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.PathUtils.PathHelper.DirectoryPathFormat(System.String,System.Boolean)">
            <summary>
            保证以目录分隔符结尾
            </summary>
            <param name="dpath"></param>
            <param name="it"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.StreamUtils.SteamSplitMergeHelper.CopyStreamPart(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            拷贝部分输入流到输出流的指定位置
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="readStartPlace"></param>
            <param name="readEndPlace"></param>
            <param name="writeStartPlace"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.StreamUtils.SteamSplitMergeHelper.MergeStream(WYQDoNet.DoNet.IOUtils.StreamUtils.StreamPartModel[],System.IO.Stream,System.Int32)">
            <summary>
            将部分流输入到输出流
            </summary>
            <param name="streamParts"></param>
            <param name="outputStream"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.StreamUtils.SteamSplitMergeHelper.SplitStream(WYQDoNet.DoNet.IOUtils.StreamUtils.StreamPartModel[],System.IO.Stream,System.Int32)">
            <summary>
            将输入流输出的部分流
            </summary>
            <param name="streamParts"></param>
            <param name="inputStream"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.StreamUtils.SteamSplitMergeHelper.StreamPartsOrder(WYQDoNet.DoNet.IOUtils.StreamUtils.StreamPartModel[])">
            <summary>
            对流部分模型按start排序
            </summary>
            <param name="streamParts"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.StreamUtils.SteamSplitMergeHelper.CloseStreamParts(WYQDoNet.DoNet.IOUtils.StreamUtils.StreamPartModel[])">
            <summary>
            关闭流部分模型
            </summary>
            <param name="streamParts"></param>
        </member>
        <member name="T:WYQDoNet.DoNet.IOUtils.StreamUtils.StreamHelper">
            <summary>
            StreamReader、StreamWriter 的默认BufferSize=128
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.StreamUtils.StreamHelper.CopyStream(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            复制流
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.IOUtils.StreamUtils.StreamHelper.CloseStreams(System.IO.Stream[])">
            <summary>
            关闭流数组
            </summary>
            <param name="streams"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.LogUtils.TraceUtils.TraceHelper.#ctor">
            <summary>
            禁止实例化
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.IsPrime(System.Int32)">
            <summary>
            判断一个数是否是质数（素数）
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.IsComposite(System.Int32)">
            <summary>
            判断一个数是否是合数
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.IsOdd(System.Int32)">
            <summary>
            判断一个数是否是奇数
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.IsEven(System.Int32)">
            <summary>
            判断一个数是否是偶数
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.GetMaxPrime(System.Int32)">
            <summary>
            返回小于等于num的最大质数
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.GetAllPrimes(System.Int32,System.Int32)">
            <summary>
            返回小于等于maxnum到大于等于minnum的所有质数,minnum小于2时minnum=2
            </summary>
            <param name="minnum"></param>
            <param name="maxnum"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.GetAllEvens(System.Int32,System.Int32)">
            <summary>
            返回小于等于maxnum到大于等于minnum的所有偶数,minnum小于2时minnum=2
            </summary>
            <param name="minnum"></param>
            <param name="maxnum"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.GetMaxComposite(System.Int32)">
            <summary>
            返回小于等于num的最大合数
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.GetAllComposites(System.Int32,System.Int32)">
            <summary>
            返回小于等于maxnum到大于等于minnum的所有合数,minnum小于4时minnum=4
            </summary>
            <param name="minnum"></param>
            <param name="maxnum"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.DecToBin(System.Int32)">
            <summary>
            数转成二进制
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.DecToBin(System.Int32,System.Char)">
            <summary>
            数转成二进制，指定左填充字符，转成32宽度
            </summary>
            <param name="num"></param>
            <param name="padleft"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.DecToBin(System.Int32,System.Char,System.Int32)">
            <summary>
            数转成二进制，指定左填充字符，转成指定宽度
            </summary>
            <param name="num"></param>
            <param name="padleft"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.GetEvenAllAddPrimes(System.Int32)">
            <summary>
            将num以下分解成所有两个质数
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.MathHelper.GetEvenFirstAddPrimes(System.Int32)">
            <summary>
            将num以下分解成两个质数
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="F:WYQDoNet.DoNet.MathUtils.Number.Bits">
            <summary>
            个位位置零
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.Number.ConvertTo(System.Int32)">
            <summary>
            将本数转为指定进制的数
            </summary>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.Number.GetBitsOfValue10(System.Int32,System.Int32)">
            <summary>
            将10进制数转为指定进制序列
            </summary>
            <param name="value10"></param>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.Number.GetValue10OfBits(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            将指定进制序列数转为10进制
            </summary>
            <param name="bits"></param>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.MathUtils.Number.RadixConvert(WYQDoNet.DoNet.MathUtils.Number,System.Int32)">
            <summary>
            将num转为指定的进制Number
            </summary>
            <param name="num"></param>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HostUtils.DnsHelper.GetHostIPs(System.String)">
            <summary>
            获取主机的所有IP
            </summary>
            <param name="host">主机名称，域名</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HostUtils.DnsHelper.GetHostFirstIP(System.String)">
            <summary>
            获取主机的第一个IP
            </summary>
            <param name="host">主机名称，域名</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HostUtils.DnsHelper.GetHostName(System.String)">
            <summary>
            依据IP,获得主机名称
            </summary>
            <param name="ip">主机名称，域名</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HostUtils.HostHelper.GetHostName">
            <summary>
            获取当前主机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HostUtils.HostHelper.GetHostAddresses(System.String)">
            <summary>
            获取指定主机所有ipv4地址
            </summary>
            <param name="hostname"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HostUtils.HostHelper.GetLocalHostAddresses">
            <summary>
            获取当前主机所有ipv4
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpBrowser.#ctor">
            <summary>
            初始化一个浏览器，用于发送http请求
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpBrowser.GetHttpGetHeadersCookiesBody(System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Get请求，获取Headers,Cookies,Body
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>Headers,Cookies,Body</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpBrowser.GetHttpPostHeadersCookiesBody(System.String,System.Collections.Specialized.NameValueCollection,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Post请求，获取Headers,Cookies,Body
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="postdata">提交的数据</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpGetResultSimple(System.String)">
            <summary>
            简单Get请求，只获取Body
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpGetResponse(System.String,System.Collections.Specialized.NameValueCollection,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Get请求，获取HttpWebResponse
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>HttpWebResponse</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpGetHeaders(System.String,System.Collections.Specialized.NameValueCollection,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Get请求，获取WebHeaderCollection
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>WebHeaderCollection</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpGetCookies(System.String,System.Collections.Specialized.NameValueCollection,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Get请求，获取CookieCollection
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>CookieCollection</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpGetBody(System.String,System.Collections.Specialized.NameValueCollection,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Get请求，获取Body
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>Body</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpGetHeadersBody(System.String,System.Collections.Specialized.NameValueCollection,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Get请求，获取Headers,Body
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>Headers,Body</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpGetHeadersCookiesBody(System.String,System.Collections.Specialized.NameValueCollection,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Get请求，获取Headers,Cookies,Body
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>Headers,Cookies,Body</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            接受509证书
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpPostResponse(System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Post请求，获取HttpWebResponse
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>HttpWebResponse</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpPostHeaders(System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Post请求，获取Headers
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>Headers</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpPostCookies(System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Post请求，获取Cookies
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>Cookies</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpPostBody(System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Post请求，获取Body
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>Body</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpPostHeadersBody(System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Post请求，获取Headers,Body
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>Headers,Body</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.NetUtils.HttpUtils.HttpHelper.GetHttpPostHeadersCookiesBody(System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Net.CookieCollection,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            依据http地址，发送Post请求，获取Headers,Cookies,Body
            </summary>
            <param name="url">地址</param>
            <param name="headers">http头键值对</param>
            <param name="cookies">cookie集合,用于向服务发送cookie</param>
            <param name="UA">用户代理 浏览器标示</param>
            <param name="isOverrideheader">http头是覆盖，还是追加，默认覆盖</param>
            <param name="AllowAutoRedirect">是否允许重定向，默认禁止</param>
            <param name="isSsl">是否启用SSL,默认禁止</param>
            <returns>Headers,Cookies,Body</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.CMDHelper.ExeCmd(System.String)">
            <summary>
            执行cmd命令，获取返回结果
            </summary>
            <param name="cmdtext"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.ComputerHelper.GetMachineName">
            <summary>
            获取机器名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.ComputerHelper.GetProcessorCount">
            <summary>
            获取处理器数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.DynamicCallHelper.GetAssemblyFromFile(System.String)">
            <summary>
            根据路径加载指定程序集
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.DynamicCallHelper.GetTypeFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            从程序集中依据全路径获取指定类型
            </summary>
            <param name="assembly"></param>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.DynamicCallHelper.CreateInstanceFromClassType(System.Type)">
            <summary>
            从类型中创建实例对象
            </summary>
            <param name="classType"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.DynamicCallHelper.CreateInstanceFromClassTypeParams(System.Type,System.Object[])">
            <summary>
            指定构造函数创建对象
            </summary>
            <param name="classType"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.DynamicCallHelper.InvokeMethodFromObjectByMethodName(System.Object,System.String,System.Object[])">
            <summary>
            执行对象的指定方法
            </summary>
            <param name="objt"></param>
            <param name="methodName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.DynamicCallHelper.InvokeMethodFromObjectByMethodNameParams(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            执行对象的指定方法
            </summary>
            <param name="objt"></param>
            <param name="methodName"></param>
            <param name="types"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.DynamicCallHelper.GetFieldValueFromObjectByFieldName(System.Object,System.String)">
            <summary>
            获取对象的字段值
            </summary>
            <param name="objt"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.DynamicCallHelper.SetFieldValueFromObjectByFieldName(System.Object,System.String,System.Object)">
            <summary>
            设置对象的字段值
            </summary>
            <param name="objt"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.PerformanceHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            获取指定性能监视器
            </summary>
            <param name="categoryName">性能计数器类别（性能对象）的名称</param>
            <param name="InstanceName">无.exe</param>
            <param name="counterName">性能计数器的名称</param>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.PerformanceHelper.#ctor(System.String,System.String)">
            <summary>
            获取指定性能监视器
            </summary>
            <param name="categoryName">性能计数器类别（性能对象）的名称</param>
            <param name="counterName">性能计数器的名称</param>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.PerformanceHelper.GetCounterNames(System.String,System.String)">
            <summary>
            性能计数器的名称
            </summary>
            <param name="categoryName">性能计数器类别（性能对象）的名称，无.exe</param>
            <param name="instanceName">性能计数器类别实例的名称，无.exe</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.PerformanceHelper.GetCounterNames(System.String)">
            <summary>
            性能计数器的名称
            </summary>
            <param name="categoryName">性能计数器类别（性能对象）的名称</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.ProcessHelper.ProcessKill(System.String)">
            <summary>
            依据进程名称，kill指定进程
            </summary>
            <param name="pn"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.ProcessHelper.GetProcessesName">
            <summary>
            获取经常名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.ProcessHelper.GetProcessByName(System.String)">
            <summary>
            依据名称获取进程
            </summary>
            <param name="processName">不包括.exe</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.ProcessHelper.StartApp(System.String,System.Boolean,System.String)">
            <summary>
            启动指定App
            </summary>
            <param name="AppPath"></param>
            <param name="visible"></param>
            <param name="args"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.ProcessHelper.ShellOpenFile(System.String,System.String)">
            <summary>
            通过Shell打开文件
            </summary>
            <param name="filename"></param>
            <param name="verb"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.ProcessHelper.GetFileExtensionVerbs(System.String)">
            <summary>
            获取扩展名称的动作
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.ThreadHelper.ThreadSleep(System.Int32)">
            <summary>
            线程睡眠指定毫秒数
            </summary>
            <param name="ms"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.WindowsHelper.FileCopy(System.String,System.String)">
            <summary>
            调用系统复制工具
            </summary>
            <param name="sourcePath"></param>
            <param name="destinationPath"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.WindowsHelper.GetShortCutTarget(System.String)">
            <summary>
            取快捷方式目标  
            </summary>
            <param name="lnk">快捷方式路径</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.SystemUtils.WindowsHelper.CreateShortCut(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建快捷方式，不会是否创建成功
            </summary>
            <param name="lnkFileName">快捷方式名称</param>
            <param name="targetPath">目标位置</param>
            <param name="workingDirectory">起始位置</param>
            <param name="arguments">参数</param>
            <param name="remark">备注</param>
            <param name="iconLocation">图标位置</param>
            <param name="hotKey">热键</param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.WebUtils.JsonUtils.JsonHelper.SerializeObject(System.Object)">
            <summary>
            将对象序列化为JSON格式
            </summary>
            <param name="o">对象</param>
            <returns>json字符串</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.WebUtils.JsonUtils.JsonHelper.DeserializeJsonToObject``1(System.String)">
            <summary>
            解析JSON字符串生成对象实体
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">json字符串(eg.{"ID":"112","Name":"石子儿"})</param>
            <returns>对象实体</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.WebUtils.JsonUtils.JsonHelper.DeserializeJsonToList``1(System.String)">
            <summary>
            解析JSON数组生成对象实体集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">json数组字符串(eg.[{"ID":"112","Name":"石子儿"}])</param>
            <returns>对象实体集合</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.WebUtils.JsonUtils.JsonHelper.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            反序列化JSON到给定的匿名对象.
            </summary>
            <typeparam name="T">匿名对象类型</typeparam>
            <param name="json">json字符串</param>
            <param name="anonymousTypeObject">匿名对象</param>
            <returns>匿名对象</returns>
        </member>
        <member name="T:WYQDoNet.DoNet.Win32Utils.APIMinUtils.CommonConst">
            <summary>
            Windows API 常数
            </summary>
        </member>
        <member name="T:WYQDoNet.DoNet.Win32Utils.APIMinUtils.WindowsAPI">
            <summary>
            封装Windows API类，可直接调用，和调用平常的方法相同（注：本类的方法调用不需要实利化，全部都是静态方法）
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.Win32Utils.APIMinUtils.WindowsAPI.ShellAbout(System.IntPtr,System.String,System.String,System.IntPtr)">
            <summary>
            Show Windows About Dialog
            </summary>
            <param name="hand"></param>
            <param name="caption"></param>
            <param name="text"></param>
            <param name="icon"></param>
            <example>WindowsAPI.ShellAbout(this.Handle, "caption", "text", this.Icon.Handle.ToInt32());</example>
        </member>
        <member name="M:WYQDoNet.DoNet.Win32Utils.APIMinUtils.WindowsAPI.BlockInput(System.Boolean)">
            <summary>
            enable/disable Both Keyboard and Mouse input
            </summary>
            <param name="enable"></param>
            <example>WindowsAPI.BlockInput(true);</example>
        </member>
        <member name="M:WYQDoNet.DoNet.Win32Utils.APIMinUtils.WindowsAPI.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Windows消息
            </summary>
            <param name="HWnd"></param>
            <param name="Msg"></param>
            <param name="WParam"></param>
            <param name="LParam"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.Win32Utils.APIMinUtils.WindowsAPI.MessageBox(System.IntPtr,System.String,System.String,System.Int32)">
            <summary>
            显示对话框
            </summary>
            <param name="hWnd"></param>
            <param name="lpText"></param>
            <param name="lpCaption"></param>
            <param name="uType"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.Win32Utils.APIMinUtils.WindowsAPI.PathIsFileSpec(System.String)">
            <summary>
            检查路径中是否带有 ‘:’ 和 ‘\’ 分隔符
            </summary>
            <param name="szfile"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.Win32Utils.WAPIUtils.Win32Helper.RedrawWindow(System.Int32,WYQDoNet.DoNet.Win32Utils.WAPIUtils.Win32Helper.RECT@,System.Int32,System.Int32)">
            <summary>
            WindowsUtils.RedrawWindow(0x0001019E,ref rect, 0, WindowsUtils.RDW_INVALIDATE);
            </summary>
            <param name="hWnd"></param>
            <param name="lprcUpdate"></param>
            <param name="hrgnUpdate"></param>
            <param name="fuRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.Win32Utils.WAPIUtils.Win32Helper.SetWindowForeground(System.Int32)">
            <summary>
            将窗口前置，指定窗口句柄
            </summary>
            <param name="Hwnd"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociationHelper.AddFileAssociation(System.String,System.String,System.String,System.Int32)">
            <summary>
            将扩展名与应用关联
            </summary>
            <param name="extension">扩展名包括 .   如 test.wyq 的扩展名为 .wyq</param>
            <param name="appfullPath"></param>
            <param name="numArg"></param>
        </member>
        <member name="M:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociationHelper.DeleteFileAssociation(System.String)">
            <summary>
            将扩展名与应用取消关联
            </summary>
            <param name="extension">扩展名包括 .   如 test.wyq 的扩展名为 .wyq</param>
        </member>
        <member name="T:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.ProgramIcon">
            <summary>
            Reference to an .ico file used by AF_FileAssociator.
            </summary>
        </member>
        <member name="T:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.OpenWithList">
            <summary>
            Reference to an list of executable files used by AF_FileAssociator.
            </summary>
        </member>
        <member name="T:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.ExecApplication">
            <summary>
            Reference to a executable file used by AF_FileAssociator.
            </summary>
        </member>
        <member name="P:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.ExecApplication.IsValid">
            <summary>
            Gets a value indicating whether this Executable Application is an .exe, and that it exists.
            </summary>
        </member>
        <member name="T:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator">
            <summary>
            AF_Lib's class forHelper associating files with programs and icons.
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.#ctor(System.String)">
            <summary>
            Initializes a new AF_FileAssociator class objectHelper for the specified file extension.
            </summary>
            <param name="extension">the file extension to control (such as .txt).</param>
        </member>
        <member name="F:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.Extension">
            <summary>
            Gets the extension set for this file associator to control when you initialized it.
            </summary>
        </member>
        <member name="P:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.Exists">
            <summary>
            Gets a value indicating whether the association keys exist. If the extension key doesn't, the program cannot get the name of the program association key making it appear to not exist.
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.Create(System.String,System.String,WYQDoNet.DoNet.WindowsUtils.RegistryUtils.ProgramIcon,WYQDoNet.DoNet.WindowsUtils.RegistryUtils.ExecApplication,WYQDoNet.DoNet.WindowsUtils.RegistryUtils.OpenWithList)">
            <summary>
            Create or overwrite a current file association for this FileAssociator's set extension.
            </summary>
            <param name="progID">The basic application name that uses this file extension.</param>
            <param name="description">The desription of this file extension and/or program that uses it.</param>
            <param name="defaultIcon">The icon to show on the program and it's files.</param>
            <param name="execApp">The application that will be run when the file extension is clicked.</param>
            <param name="openWith">The programs that appear in the OpenWith list.</param>
            <exception cref="T:System.Exception">Thrown when an error occurs that will prevent it from working correctly.</exception>
        </member>
        <member name="P:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.ID">
            <summary>
            Gets or sets the program ID for this extension.
            </summary>
        </member>
        <member name="P:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.Description">
            <summary>
            Gets or sets the description for this file extension and/or it's program association.
            </summary>
        </member>
        <member name="P:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.DefaultIcon">
            <summary>
            Gets or sets the icon shown on this file extension and/or it's program association.
            </summary>
        </member>
        <member name="P:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.Executable">
            <summary>
            Gets or sets the executable ran when this file extension is opened.
            </summary>
        </member>
        <member name="P:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.OpenWith">
            <summary>
            Gets or sets the list of programs shown in the OpenWith list.
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.WindowsUtils.RegistryUtils.FileAssociator.Delete">
            <summary>
            Deletes all registry resources used for this file associations.
            </summary>
        </member>
        <member name="M:WYQDoNet.DoNet.XmlUtils.XMLHelper.GetXmlDoc(System.String,System.Boolean)">
            <summary>
            依据文件路径获取XmlDocument
            </summary>
            <param name="xmlDocPath">路径</param>
            <returns>XmlDocument</returns>
        </member>
        <member name="M:WYQDoNet.DoNet.XmlUtils.XMLHelper.SaveXmlDoc(System.Xml.XmlDocument,System.String)">
            <summary>
            将XmlDocument保存为文件
            </summary>
            <param name="xmlDoc"></param>
            <param name="xmlDocPath">保存路径</param>
        </member>
        <member name="M:WYQDoNet.DoNet.XmlUtils.XMLSerializationHelper.XMLFileDeserialize``1(System.String)">
            <summary>
            xml文件反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlfilepath"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.XmlUtils.XMLSerializationHelper.XMLStringDeserialize``1(System.String)">
            <summary>
            xml字符串反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.XmlUtils.XMLSerializationHelper.XMLStreamDeserialize``1(System.IO.Stream)">
            <summary>
            xml流反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.XmlUtils.XMLSerializationHelper.XMLStringSerializer``1(``0)">
            <summary>
            序列化到字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.XmlUtils.XMLSerializationHelper.XMLStreamSerializer``1(``0)">
            <summary>
            序列化到流
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WYQDoNet.DoNet.XmlUtils.XMLSerializationHelper.XMLFileSerializer``1(``0,System.String)">
            <summary>
            序列化到文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="xmlfilepath"></param>
            <returns>成功返回true</returns>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Microsoft.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Microsoft.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
    </members>
</doc>
